# src/configuration/hyperparams.yaml

base_params:
    XGB: 
        learning_rate: 0.1
        max_depth: 3
        n_estimators: 40
        reg_lambda: 0.5
        reg_alpha: 0
        scale_pos_weight: 10
        seed: 42
        subsample: 0.8
        colsample_bytree: 1.0
        gamma: 0


    ET: 
        max_depth: 3
        n_estimators: 100
        n_jobs: 6
        bootstrap: False
        min_samples_split: 2
        min_samples_leaf: 10
        max_features: 0.8

    ADA:
        n_estimators: 50
        learning_rate: 1.0


param_spaces:
    XGB: 
        n_estimators: [35, 40, 50, 100]
        max_depth: [3, 4, 5, 6]
        learning_rate: [0.3, 0.1, 0.01]
        subsample: [0.8, 1.0]
        colsample_bytree: [1.0]
        gamma: [0, 0.05, 0.1]
        reg_alpha: [0,0.1, 0.5]
        reg_lambda: [0.3, 0.5, 0.7]
        seed: [42]

    ET: 
        n_estimators: [40, 100, 200, 300]
        max_features: [0.8, 1.0]
        max_depth: [3, 4, 5, 6]
        min_samples_split: [2, 5, 7]
        min_samples_leaf: [1, 2, 5, 10]
        bootstrap: [True, False]
        random_state: [42]

    ADA: 
        n_estimators: [50, 100, 200]  # Default: 50
        learning_rate: [1.0, 0.5, 0.1, 0.01]  # Default: 1.0
        loss: ['linear', 'square', 'exponential']  # Default: 'linear'
        random_state: [42]
        estimator: [DecisionTreeRegressor(max_depth=1), DecisionTreeRegressor(max_depth=3), DecisionTreeRegressor(max_depth=5),
            DecisionTreeRegressor(max_depth=9), RandomForestRegressor(n_estimators=10)]

# xgb_param_space_hpt: 
#     max_depth: hp.choice(max_depth, [1, 2, 4, 9, 11, 30]),
#     learning_rate: hp.choice(learning_rate, [0.01, 0.03, 0.05, 0.08 ,0.1, 0.5, 1.0]),
#     gamma: hp.choice(gamma, [0.005, 0.01, 0.08, 0.1, 1.0]),
#     reg_lambda: hp.choice(reg_lambda, [1, 10, 30, 40, 50, 60]),
#     n_estimators: hp.choice(n_estimators, [40, 150, 180, 200, 230, 250, 300]),
#     scale_pos_weight: hp.choice(scale_pos_weight, [2, 3, 4, 10, 15, 17, 20, 25, 30]),
#     colsample_bytree: hp.choice(colsample_bytree, [0.8, 1.0]),
#     min_child_weight: hp.choice(min_child_weight, [1, 2, 4, 7, 8, 10]),
#     subsample: hp.choice(subsample, [0.8, 1.0]),
#     reg_alpha: hp.choice(reg_alpha, [0.01, 0.1, 0.25, 0.5, 1.0])