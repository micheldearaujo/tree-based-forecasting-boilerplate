# src/configuration/hyperparams.yaml

BASE_PARAMS:
  xgb: 
      learning_rate: 0.01
      max_depth: 11
      n_estimators: 200
      reg_lambda: 10
      scale_pos_weight: 10
      seed: 42
      subsample: 1.0
      colsample_bytree: 1.0
      gamma: 0.01

  et: 
      max_depth: 11
      n_estimators: 40



PARAM_SPACES:
  xgb: 
      min_child_weight: [None, 1, 7]
      n_estimators: [None, 40, 300]
      max_depth: [None, 3, 9]
      learning_rate: [None, 1.0, 0.1]
      subsample: [None, 0.8, 1.0]
      colsample_bytree: [None, 1.0]
      gamma: [None, 0.1, 1.0]
      reg_alpha: [None, 0.5, 1.0]
      reg_lambda: [None, 0.5, 1.0]
      seed: [42]

  et: 
      n_estimators: [100, 200, 400]
      max_features: [1.0, sqrt, log2]
      max_depth: [None, 3, 5, 7, 9]
      min_samples_split: [2, 5, 10]
      min_samples_leaf: [1, 2, 4]
      bootstrap: [True, False]

  lgb: 
      min_child_weight: [None, 1, 3, 5, 7]
      n_estimators: [None, 40, 100, 300]
      max_depth: [None, 3, 5, 7, 9]
      learning_rate: [None, 0.2, 0.3, 0.1, 0.01]
      subsample: [None, 0.8, 1.0]
      colsample_bytree: [None, 1.0]
      gamma: [None, 0.1, 0.25, 0.5, 1.0]
      reg_alpha: [None, 0, 0.25, 0.5, 1.0]
      reg_lambda: [None, 0, 0.25, 0.5, 1.0]
      seed: [42]

# xgb_param_space_hpt: 
#     max_depth: hp.choice(max_depth, [1, 2, 4, 9, 11, 30]),
#     learning_rate: hp.choice(learning_rate, [0.01, 0.03, 0.05, 0.08 ,0.1, 0.5, 1.0]),
#     gamma: hp.choice(gamma, [0.005, 0.01, 0.08, 0.1, 1.0]),
#     reg_lambda: hp.choice(reg_lambda, [1, 10, 30, 40, 50, 60]),
#     n_estimators: hp.choice(n_estimators, [40, 150, 180, 200, 230, 250, 300]),
#     scale_pos_weight: hp.choice(scale_pos_weight, [2, 3, 4, 10, 15, 17, 20, 25, 30]),
#     colsample_bytree: hp.choice(colsample_bytree, [0.8, 1.0]),
#     min_child_weight: hp.choice(min_child_weight, [1, 2, 4, 7, 8, 10]),
#     subsample: hp.choice(subsample, [0.8, 1.0]),
#     reg_alpha: hp.choice(reg_alpha, [0.01, 0.1, 0.25, 0.5, 1.0])